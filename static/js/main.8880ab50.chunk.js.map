{"version":3,"sources":["components/Cards/cards.module.css","components/Header/header.jsx","components/Cards/cards.jsx","API/index.js","components/Chart/chart.jsx","components/Select-Country/country.jsx","components/Footer/footer.jsx","App.js","serviceWorker.js","index.js","components/Header/header.module.css","components/Chart/chart.module.css","components/Select-Country/country.module.css","components/Footer/footer.module.css"],"names":["module","exports","Header","className","style","container","Cards","data","confirmed","recovered","deaths","lastUpdate","Styles","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeURL","axios","get","fetchDailyData","moddifiedData","map","dailyData","total","date","reportDate","fetchCountriesData","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","borderColor","fill","Country","changeInfectedCountry","setCountries","FormControl","NativeSelect","defaultValue","onChange","e","target","index","key","Footer","App","state","fetchedData","setState","this","Style","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8880ab50.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"cards_container__2RRbD\",\"card\":\"cards_card__2qhC5\",\"infected\":\"cards_infected__3EhdO\",\"recovered\":\"cards_recovered__JtDn9\",\"deaths\":\"cards_deaths__3zNyl\"};","import React from \"react\";\r\n\r\nimport style from \"./header.module.css\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className={style.container}>\r\n      <h2>Cornavirus Global Tracker</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nimport Styles from \"./cards.module.css\";\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if (!confirmed) {\r\n        return \"Loading data ...\"\r\n    }\r\n\r\n    return (\r\n        <div className={Styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(Styles.card, Styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={10}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Active cases of COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <br/>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(Styles.card, Styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Recovered\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={10}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of recoveries from COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <br/>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(Styles.card, Styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Casualites\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={10}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of deaths from COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <br/>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeURL = url;\r\n\r\n    if (country) {\r\n        changeURL = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeURL);\r\n\r\n        return {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate\r\n        };\r\n        \r\n    } catch (error) {\r\n        return error;\r\n    }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`)\r\n\r\n        const moddifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n\r\n        return moddifiedData;\r\n    }\r\n    catch (error) {\r\n        return error;\r\n    }\r\n};\r\n\r\nexport const fetchCountriesData = async () => {\r\n    try {\r\n        const { data: { countries } } = await axios.get(`${url}/countries`)\r\n        return countries.map((country) => country.name);\r\n    }\r\n    catch (error) {\r\n        return error;\r\n    }\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../API\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport style from \"./chart.module.css\";\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const barChart = (\r\n        confirmed\r\n            ? (\r\n                <Bar\r\n                    data={{\r\n                        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n                        datasets: [{\r\n                            label: \"People\",\r\n                            backgroundColor: [\r\n                                \"rgba(1, 25, 248, 0.425)\",\r\n                                \"rgba(21, 248, 13, 0.486)\",\r\n                                \"rgba(172, 3, 3, 0.589)\",\r\n                            ],\r\n                            data: [confirmed.value, recovered.value, deaths.value]\r\n                        }]\r\n                    }}\r\n                    options={{\r\n                        legend: { display: false },\r\n                        title: { display: true, text: `Current state in ${country}` }\r\n                    }}\r\n                />\r\n            ) : null\r\n    );\r\n\r\n    const lineChart = (\r\n        dailyData\r\n            ? (\r\n                <Line\r\n                    data={{\r\n                        labels: dailyData.map(({ date }) => date),\r\n                        datasets: [{\r\n                            data: dailyData.map(({ confirmed }) => confirmed),\r\n                            label: \"Infected\",\r\n                            borderColor: \"#3333ff\",\r\n                            fill: true,\r\n                        },\r\n                        {\r\n                            data: dailyData.map(({ deaths }) => deaths),\r\n                            label: \"Deaths\",\r\n                            borderColor: \"red\",\r\n                            backgroundColor: \"rgba(172, 3, 3, 0.589)\",\r\n                            fill: true,\r\n                        }]\r\n                    }}\r\n                />\r\n            ) : null\r\n    );\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Chart;","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\n\r\nimport style from \"./country.module.css\";\r\n\r\nimport { fetchCountriesData } from \"../../API\";\r\n\r\nconst Country = ({ changeInfectedCountry }) => {\r\n    const [countries, setCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setCountries(await fetchCountriesData());\r\n        }\r\n\r\n        fetchAPI();\r\n    }, [setCountries]);\r\n\r\n    return (\r\n        <FormControl className={style.FormControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => changeInfectedCountry(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {countries.map((country, index) =>\r\n                    <option key={index} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default Country;","import React from \"react\";\r\n\r\nimport style from \"./footer.module.css\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className={style.container}>\r\n      <br />\r\n      <h2>© 2020 Alexander Rocha</h2>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\n\nimport Header from \"./components/Header/header\";\nimport Cards from \"./components/Cards/cards\";\nimport Chart from \"./components/Chart/chart\";\nimport Country from \"./components/Select-Country/country\";\nimport Footer from \"./components/Footer/footer\";\n\nimport Style from \"./App.css\";\nimport { fetchData } from \"./API/index\";\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n\n    this.setState({ data: fetchedData, });\n  };\n\n  changeInfectedCountry = async (country) => {\n    const fetchedData = await fetchData(country);\n\n    this.setState({ data: fetchedData, country: country })\n  };\n\n  render() {\n    const { data, country } = this.state;\n\n    return (\n      <div className={Style.container}>\n        <Header />\n        <Cards data={data} />\n        <Country changeInfectedCountry={this.changeInfectedCountry} />\n        <Chart data={data} country={country} />\n        <Footer />\n      </div>\n    );\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"header_container__tHvDg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"chart_container__1qBJP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"country_formControl__3GDBW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"footer_container__3PLyY\"};"],"sourceRoot":""}